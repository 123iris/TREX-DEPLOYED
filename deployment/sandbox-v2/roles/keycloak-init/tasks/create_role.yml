
- name: 'Read name of role'
  set_fact:
    kc_role_name: '{{kc_role_json.name}}' # kc_role_json is a dict

- name: 'Get id of client {{kc_client_id}}'
  include_tasks: get_client_info.yml
  # Returns kc_client_info

# Url is different for client and realm roles
- set_fact:
    keycloak_role_url: '{{keycloak_url}}/auth/admin/realms/{{kc_realm_id}}/roles'
  when: (kc_client_id | trim)  == ''  # Role inside realm

- set_fact:
    keycloak_role_url: '{{keycloak_url}}/auth/admin/realms/{{kc_realm_id}}/clients/{{kc_client_info.json[0].id}}/roles'
  when: (kc_client_id | trim) != ''  # Role inside client

# Check if the role exists
- name: 'Check if role {{kc_role_name}} exists.'  
  uri:
    url: '{{keycloak_role_url}}/{{kc_role_name}}'
    method: GET 
    remote_src: 'no'
    status_code:
     - 200
     - 404
    headers:
      Content-type: "application/json"
      Accept: "application/json"
      Authorization: "Bearer {{keycloak_admin_token}}"
  register: kc_role_exists 

# Check if role exists, update it

- name: 'Create role {{kc_role_file}}'
  uri:
    url: '{{keycloak_role_url}}'
    method: POST 
    body: '{{kc_role_json}}' 
    body_format: json
    remote_src: 'no'
    status_code:
     - 201
    headers:
      Content-type: "application/json"
      Accept: "application/json"
      Authorization: "Bearer {{keycloak_admin_token}}"
  when: "kc_role_exists.status == 404"  # Role does not exist

- name: 'Update role {{kc_role_name}}' 
  uri:
    url: '{{keycloak_role_url}}/{{kc_role_name}}'
    method: PUT 
    body: '{{kc_role_json}}' 
    body_format: json
    remote_src: 'no'
    status_code:
     - 204
    headers:
      Content-type: "application/json"
      Accept: "application/json"
      Authorization: "Bearer {{keycloak_admin_token}}"
  when: "kc_role_exists.status == 200"  # Role does not exist
